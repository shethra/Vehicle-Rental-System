#include <iostream> 
#include <memory> 
#include <map> 
#include <string> 
#include <mutex> 
#include <stdexcept>
#include <vector> 

// Abstract Base Class for Vehicle 
class Vehicle { 
protected: 
    std::string licensePlate; 
    double baseRate; // Base rental rate 
public: 
    Vehicle(const std::string& license, double rate) 
        : licensePlate(license), baseRate(rate) {} 
    virtual ~Vehicle() = default; 
    
    virtual double calculateRentalFee(int duration) const = 0; // Pure virtual function 
    std::string getLicensePlate() const { return licensePlate; } 
}; 

// Subclasses for Car and Truck 
class Car : public Vehicle { 
public:
    Car(const std::string& license, double rate) : Vehicle(license, rate) {} 
    double calculateRentalFee(int duration) constoverride { 
        return baseRate * duration; // Daily rental rate 
    } 
}; 

class Truck : public Vehicle { 
public: 
    Truck(const std::string& license, double rate) : Vehicle(license, rate) {} 
    double calculateRentalFee(int duration) const override { 
        return baseRate * 1.5 * duration; // Higher rate for trucks 
    } 
}; 

// Factory for Vehicle Creation 
class VehicleFactory { 
public: 
    static std::unique_ptr<Vehicle> createVehicle(const std::string& type, 
                                                  const std::string& license, 
                                                  double rate) { 
        if (type == "Car") { 
            return std::make_unique<Car>(license, rate); 
        } else if (type == "Truck") { 
            return std::make_unique<Truck>(license, rate); 
        } throw std::invalid_argument("Invalid vehicle type"); 
    } 
}; 

// Rental Class 
class Rental { 
    std::string customerName; 
    std::unique_ptr<Vehicle> vehicle; 
    int rentalDuration; // Duration in days 
    double totalFee; 

public:
    Rental(const std::string& name, std::unique_ptr<Vehicle> veh, int duration) 
        : customerName(name), vehicle(std::move(veh)), rentalDuration(duration) { 
        totalFee = vehicle->calculateRentalFee(duration); 
    } 

    void printRentalDetails() const { 
        std::cout << "Customer: " << customerName << "\n" 
                  << "Vehicle: " << vehicle->getLicensePlate() << "\n" 
                  << "Duration: " << rentalDuration << " days\n" 
                  << "Total Fee: $" << totalFee << "\n"; 
    } 
}; 

// Singleton Reservation System 
class ReservationSystem { 
    std::map<std::string, bool> vehicleInventory; // License Plate -> Availability 
    std::vector<std::shared_ptr<Rental>> rentals; 
    std::mutex systemMutex; // For thread safety 
    static std::unique_ptr<ReservationSystem> instance; 
  	static std::mutex instanceMutex; 

    ReservationSystem() = default; 

public:
    static ReservationSystem& getInstance() { 
        std::lock_guard<std::mutex> lock(instanceMutex); 
        if (!instance) { 
            instance.reset(new ReservationSystem()); 
        } 
        return *instance; 
} 

    void addVehicle(const std::string& license) {
        std::lock_guard<std::mutex> lock(systemMutex); 
        vehicleInventory[license] = true; // Available 
    } 

    void bookVehicle(const std::string& customerName, const std::string& type, 
                      const std::string& license, int duration, double rate) {
        std::lock_guard<std::mutex> lock(systemMutex); 
        if (!vehicleInventory[license]) { 
            throw std::runtime_error("Vehicle is already booked"); 
        } 
        auto vehicle = VehicleFactory::createVehicle(type, license, rate); 
        auto rental = std::make_shared<Rental>(customerName, std::move(vehicle), duration); 
        rentals.push_back(rental); 
        vehicleInventory[license] = false; // Mark as booked 
    } 

    void returnVehicle(const std::string& license) {
        std::lock_guard<std::mutex> lock(systemMutex); 
        vehicleInventory[license] = true; // Mark as available 
    } 

    void printAllRentals() const { 
        for (const auto& rental : rentals) { 
            rental->printRentalDetails(); 
        } 
    } 
}; 

// Static member initialization 
std::unique_ptr<ReservationSystem> ReservationSystem::instance = nullptr; 
std::mutex ReservationSystem::instanceMutex; 

// Main Function 
int main() { 
    try { 
        auto& system = ReservationSystem::getInstance(); 

        // Adding vehicles to inventory 
        system.addVehicle("ABC123"); 
        system.addVehicle("XYZ789"); 

        // Booking vehicles 
        system.bookVehicle("John Doe", "Car", "ABC123", 3, 50); 
        system.bookVehicle("Jane Smith", "Truck", "XYZ789", 2, 75); 

        // Display all rentals 
        std::cout << "Current Rentals:\n"; 
        system.printAllRentals(); 

        // Returning a vehicle 
        system.returnVehicle("ABC123"); 
        std::cout << "\nVehicle ABC123 returned.\n"; 

    } catch (const std::exception& ex) { 
        std::cerr << "Error: " << ex.what() << "\n"; 
    } 
    return 0; 
}
